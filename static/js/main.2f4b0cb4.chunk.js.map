{"version":3,"sources":["componenst/card-item/card-item.jsx","componenst/card-list/card-list.jsx","componenst/search-box/search-box.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["CardItem","props","className","src","cat","id","alt","name","email","CardList","cats","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","res","json","users","setState","e","this","target","value","filteredCats","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAWeA,EAVE,SAAAC,GACf,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,IAAIC,GAApC,aAAmDC,IAAI,QAC/D,6BAAKL,EAAMG,IAAIG,OACf,4BAAIN,EAAMG,IAAII,YCMLC,G,MAVE,SAAAR,GACf,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,KAAKC,KAAI,SAAAP,GAAG,OACjB,cAAC,EAAD,CAAuBA,IAAKA,GAAbA,EAAIC,WCMZO,G,MAXG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC/B,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0CDG,E,kDA3Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,KAAM,GACNS,YAAa,IAJH,E,qDAWd,WAAqB,IAAD,OAClBC,MAAM,6CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,KAAMc,S,0BAMxC,SAAaE,GACXC,KAAKF,SAAS,CAACN,YAAaO,EAAEE,OAAOC,U,oBAGvC,WAAU,IAAD,SACqBF,KAAKT,MAA1BR,EADA,EACAA,KAAMS,EADN,EACMA,YAEPW,EAAepB,EAAKqB,QAAO,SAAA3B,GAAG,OAClCA,EAAIG,KAAKyB,cAAcC,SAASd,EAAYa,kBAE9C,OACE,sBAAK9B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACEW,YAAY,cACZC,aAAc,SAAAY,GAAC,OAAI,EAAKZ,aAAaY,MAEvC,cAAC,EAAD,CAAUhB,KAAMoB,W,GAtCNI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2f4b0cb4.chunk.js","sourcesContent":["import './cart-item.style.scss';\nconst CardItem = props => {\n  return (\n    <div className=\"card-container\">\n      <img src={`https://robohash.org/${props.cat.id}?set=set4`} alt=\"cat\" />\n      <h2>{props.cat.name}</h2>\n      <p>{props.cat.email}</p>\n    </div>\n  );\n};\n\nexport default CardItem;\n","import CardItem from '../card-item/card-item';\nimport './card-list.style.scss';\nconst CardList = props => {\n  return (\n    <div className=\"card-list\">\n      {props.cats.map(cat => (\n        <CardItem key={cat.id} cat={cat}/>\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import './search-box.style.scss';\nconst SearchBox = ({placeholder, handleChange}) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import './App.scss';\nimport {Component} from 'react';\nimport CardList from './componenst/card-list/card-list';\nimport SearchBox from './componenst/search-box/search-box';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cats: [],\n      searchField: '',\n    };\n  }\n\n  /**\n   * Init get API\n   */\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({cats: users}));\n  }\n\n  /**\n   * Search\n   */\n  handleChange(e) {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const {cats, searchField} = this.state;\n    // Filter\n    const filteredCats = cats.filter(cat =>\n      cat.name.toLowerCase().includes(searchField.toLowerCase()),\n    );\n    return (\n      <div className=\"App\">\n        <h1>Cats RoboHash</h1>\n        <SearchBox\n          placeholder=\"Search cats\"\n          handleChange={e => this.handleChange(e)}\n        />\n        <CardList cats={filteredCats}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}